"use strict";(self.webpackChunknext_app=self.webpackChunknext_app||[]).push([[797],{"./node_modules/rehype-sanitize/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>rehypeSanitize});var esm=__webpack_require__("./node_modules/@ungap/structured-clone/esm/index.js"),lib=__webpack_require__("./node_modules/unist-util-position/lib/index.js");const aria=["ariaDescribedBy","ariaLabel","ariaLabelledBy"],defaultSchema={ancestors:{tbody:["table"],td:["table"],th:["table"],thead:["table"],tfoot:["table"],tr:["table"]},attributes:{a:[...aria,"dataFootnoteBackref","dataFootnoteRef",["className","data-footnote-backref"],"href"],blockquote:["cite"],code:[["className",/^language-./]],del:["cite"],div:["itemScope","itemType"],dl:[...aria],h2:[["className","sr-only"]],img:[...aria,"longDesc","src"],input:[["disabled",!0],["type","checkbox"]],ins:["cite"],li:[["className","task-list-item"]],ol:[...aria,["className","contains-task-list"]],q:["cite"],section:["dataFootnotes",["className","footnotes"]],source:["srcSet"],summary:[...aria],table:[...aria],ul:[...aria,["className","contains-task-list"]],"*":["abbr","accept","acceptCharset","accessKey","action","align","alt","axis","border","cellPadding","cellSpacing","char","charOff","charSet","checked","clear","colSpan","color","cols","compact","coords","dateTime","dir","encType","frame","hSpace","headers","height","hrefLang","htmlFor","id","isMap","itemProp","label","lang","maxLength","media","method","multiple","name","noHref","noShade","noWrap","open","prompt","readOnly","rev","rowSpan","rows","rules","scope","selected","shape","size","span","start","summary","tabIndex","title","useMap","vAlign","value","width"]},clobber:["ariaDescribedBy","ariaLabelledBy","id","name"],clobberPrefix:"user-content-",protocols:{cite:["http","https"],href:["http","https","irc","ircs","mailto","xmpp"],longDesc:["http","https"],src:["http","https"]},required:{input:{disabled:!0,type:"checkbox"}},strip:["script"],tagNames:["a","b","blockquote","br","code","dd","del","details","div","dl","dt","em","h1","h2","h3","h4","h5","h6","hr","i","img","input","ins","kbd","li","ol","p","picture","pre","q","rp","rt","ruby","s","samp","section","source","span","strike","strong","sub","summary","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul","var"]},own={}.hasOwnProperty;function transform(state,node){if(node&&"object"==typeof node){const unsafe=node;switch("string"==typeof unsafe.type?unsafe.type:""){case"comment":return function comment(state,unsafe){if(state.schema.allowComments){const result="string"==typeof unsafe.value?unsafe.value:"",index=result.indexOf("--\x3e"),node={type:"comment",value:index<0?result:result.slice(0,index)};return patch(node,unsafe),node}}(state,unsafe);case"doctype":return function doctype(state,unsafe){if(state.schema.allowDoctypes){const node={type:"doctype"};return patch(node,unsafe),node}}(state,unsafe);case"element":return function lib_element(state,unsafe){const name="string"==typeof unsafe.tagName?unsafe.tagName:"";state.stack.push(name);const content=children(state,unsafe.children),properties_=function properties(state,properties){const tagName=state.stack[state.stack.length-1],attributes=state.schema.attributes,required=state.schema.required,specific=attributes&&own.call(attributes,tagName)?attributes[tagName]:void 0,defaults=attributes&&own.call(attributes,"*")?attributes["*"]:void 0,properties_=properties&&"object"==typeof properties?properties:{},result={};let key;for(key in properties_)if(own.call(properties_,key)){const unsafe=properties_[key];let safe=propertyValue(state,findDefinition(specific,key),key,unsafe);null==safe&&(safe=propertyValue(state,findDefinition(defaults,key),key,unsafe)),null!=safe&&(result[key]=safe)}if(required&&own.call(required,tagName)){const properties=required[tagName];for(key in properties)own.call(properties,key)&&!own.call(result,key)&&(result[key]=properties[key])}return result}(state,unsafe.properties);state.stack.pop();let safeElement=!1;if(name&&"*"!==name&&(!state.schema.tagNames||state.schema.tagNames.includes(name))&&(safeElement=!0,state.schema.ancestors&&own.call(state.schema.ancestors,name))){const ancestors=state.schema.ancestors[name];let index=-1;for(safeElement=!1;++index<ancestors.length;)state.stack.includes(ancestors[index])&&(safeElement=!0)}if(!safeElement)return state.schema.strip&&!state.schema.strip.includes(name)?content:void 0;const node={type:"element",tagName:name,properties:properties_,children:content};return patch(node,unsafe),node}(state,unsafe);case"root":return function root(state,unsafe){const content=children(state,unsafe.children),node={type:"root",children:content};return patch(node,unsafe),node}(state,unsafe);case"text":return function lib_text(_,unsafe){const value="string"==typeof unsafe.value?unsafe.value:"",node={type:"text",value};return patch(node,unsafe),node}(0,unsafe)}}}function children(state,children){const results=[];if(Array.isArray(children)){const childrenUnknown=children;let index=-1;for(;++index<childrenUnknown.length;){const value=transform(state,childrenUnknown[index]);value&&(Array.isArray(value)?results.push(...value):results.push(value))}}return results}function propertyValue(state,definition,key,value){return definition?Array.isArray(value)?function propertyValueMany(state,definition,key,values){let index=-1;const result=[];for(;++index<values.length;){const value=propertyValuePrimitive(state,definition,key,values[index]);"number"!=typeof value&&"string"!=typeof value||result.push(value)}return result}(state,definition,key,value):propertyValuePrimitive(state,definition,key,value):void 0}function propertyValuePrimitive(state,definition,key,value){if(("boolean"==typeof value||"number"==typeof value||"string"==typeof value)&&function safeProtocol(state,key,value){const protocols=state.schema.protocols&&own.call(state.schema.protocols,key)?state.schema.protocols[key]:void 0;if(!protocols||0===protocols.length)return!0;const url=String(value),colon=url.indexOf(":"),questionMark=url.indexOf("?"),numberSign=url.indexOf("#"),slash=url.indexOf("/");if(colon<0||slash>-1&&colon>slash||questionMark>-1&&colon>questionMark||numberSign>-1&&colon>numberSign)return!0;let index=-1;for(;++index<protocols.length;){const protocol=protocols[index];if(colon===protocol.length&&url.slice(0,protocol.length)===protocol)return!0}return!1}(state,key,value)){if("object"==typeof definition&&definition.length>1){let ok=!1,index=0;for(;++index<definition.length;){const allowed=definition[index];if(allowed&&"object"==typeof allowed&&"flags"in allowed){if(allowed.test(String(value))){ok=!0;break}}else if(allowed===value){ok=!0;break}}if(!ok)return}return state.schema.clobber&&state.schema.clobberPrefix&&state.schema.clobber.includes(key)?state.schema.clobberPrefix+value:value}}function patch(node,unsafe){const cleanPosition=(0,lib.G1)(unsafe);unsafe.data&&(node.data=(0,esm.Ay)(unsafe.data)),cleanPosition&&(node.position=cleanPosition)}function findDefinition(definitions,key){let dataDefault,index=-1;if(definitions)for(;++index<definitions.length;){const entry=definitions[index],name="string"==typeof entry?entry:entry[0];if(name===key)return entry;"data*"===name&&(dataDefault=entry)}if(key.length>4&&"data"===key.slice(0,4).toLowerCase())return dataDefault}function rehypeSanitize(options){return function(tree){const result=function sanitize(node,options){let result={type:"root",children:[]};const replace=transform({schema:options?{...defaultSchema,...options}:defaultSchema,stack:[]},node);return replace&&(Array.isArray(replace)?1===replace.length?result=replace[0]:result.children=replace:result=replace),result}(tree,options);return result}}}}]);