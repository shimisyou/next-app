"use strict";(self.webpackChunknext_app=self.webpackChunknext_app||[]).push([[217],{"./features/TCG/components/PackSwiper/PackSwiperContainer.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithInteraction:()=>WithInteraction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>PackSwiperContainer_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),mocks_packs=__webpack_require__("./features/TCG/mocks/packs.ts"),CardSwiperContainer=__webpack_require__("./features/TCG/components/CardSwiper/CardSwiperContainer.tsx"),PackSwiper=__webpack_require__("./features/TCG/components/PackSwiper/PackSwiper.tsx"),console=__webpack_require__("./node_modules/console-browserify/index.js");const PackSwiperContainer=({fallback})=>{const[packs,setPacks]=(0,react.useState)([]),[selectedPack,setSelectedPack]=(0,react.useState)(null),[isPackOpened,setIsPackOpened]=(0,react.useState)(!1);(0,react.useEffect)((()=>{const generatedPacks=(0,mocks_packs.up)();console.log("Generated Packs:",generatedPacks),setPacks(generatedPacks)}),[]);return packs.length?(0,jsx_runtime.jsx)(Box.A,{children:isPackOpened?selectedPack&&(0,jsx_runtime.jsx)(CardSwiperContainer.m,{cards:selectedPack.cards,onComplete:()=>{setIsPackOpened(!1),selectedPack&&(setPacks((prevPacks=>prevPacks.filter((pack=>pack.id!==selectedPack.id)))),setSelectedPack(null))}}):(0,jsx_runtime.jsx)(PackSwiper.A,{packs,onSlideChange:pack=>{setSelectedPack(pack)},onOpenPack:()=>{setIsPackOpened(!0)}})}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:fallback})},PackSwiper_PackSwiperContainer=PackSwiperContainer;PackSwiperContainer.__docgenInfo={description:"",methods:[],displayName:"PackSwiperContainer",props:{fallback:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}};const PackSwiperContainer_stories={component:PackSwiper_PackSwiperContainer,args:{}},Default={args:{fallback:null}},WithInteraction={args:{fallback:null},play:async({canvasElement,step})=>{const canvas=(0,dist.ux)(canvasElement);await new Promise((resolve=>setTimeout(resolve,2e3))),await step("パックを開く",(async()=>{const openButton=await canvas.findByRole("button",{name:/開封/i});await dist.Q4.click(openButton),await(0,dist.fm)((()=>{(0,dist.E3)(dist.nj.getByRole("dialog")).toBeInTheDocument()}))})),await step("ナビゲーションボタンでスライドを進める",(async()=>{const modal=await dist.nj.findByRole("dialog"),nextButton=(0,dist.ux)(modal).getByRole("button",{name:/めくる/i});(0,dist.E3)((await dist.nj.findAllByRole("img")).length).toBe(mocks_packs.lB[0].cards.length);for(const{}of mocks_packs.lB[0].cards)await dist.Q4.click(nextButton),await new Promise((resolve=>setTimeout(resolve,500)));const endButton=(0,dist.ux)(modal).getByRole("button",{name:/終了/i});(0,dist.E3)(endButton).toBeInTheDocument()})),await step("終了ボタンでモーダルが閉じること",(async()=>{const endButton=dist.nj.getByRole("button",{name:/終了/i});await dist.Q4.click(endButton),(0,dist.E3)(dist.nj.queryByRole("dialog")).not.toBeInTheDocument()}))}},__namedExportsOrder=["Default","WithInteraction"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    fallback: null\n  }\n}",...Default.parameters?.docs?.source}}},WithInteraction.parameters={...WithInteraction.parameters,docs:{...WithInteraction.parameters?.docs,source:{originalSource:"{\n  args: {\n    fallback: null\n  },\n  play: async ({\n    canvasElement,\n    step\n  }) => {\n    const canvas = within(canvasElement);\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Op\n\n    await step('パックを開く', async () => {\n      const openButton = await canvas.findByRole('button', {\n        name: /開封/i\n      });\n      await userEvent.click(openButton);\n\n      // モーダル描画を待つ\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument();\n      });\n    });\n    await step('ナビゲーションボタンでスライドを進める', async () => {\n      const modal = await screen.findByRole('dialog');\n      const nextButton = within(modal).getByRole('button', {\n        name: /めくる/i\n      });\n      expect((await screen.findAllByRole('img')).length).toBe(mockPacks[0].cards.length);\n      for (const {} of mockPacks[0].cards) {\n        await userEvent.click(nextButton);\n        await new Promise(resolve => setTimeout(resolve, 500)); // Optional delay for better simulation\n      }\n      const endButton = within(modal).getByRole('button', {\n        name: /終了/i\n      });\n      expect(endButton).toBeInTheDocument();\n    });\n    await step('終了ボタンでモーダルが閉じること', async () => {\n      const endButton = screen.getByRole('button', {\n        name: /終了/i\n      });\n      await userEvent.click(endButton);\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n  }\n}",...WithInteraction.parameters?.docs?.source}}}},"./features/TCG/components/CardSwiper/CardSwiperContainer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>CardSwiperContainer});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),Modal=__webpack_require__("./node_modules/@mui/material/Modal/Modal.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js");const ContentModal=({open,onClose,children})=>(0,jsx_runtime.jsx)(Modal.A,{open,onClose,slotProps:{backdrop:{style:{backgroundColor:"transparent",backdropFilter:"blur(10px)"}}},"aria-labelledby":"modal-modal-title","aria-describedby":"modal-modal-description","aria-modal":"true",role:"dialog",children:(0,jsx_runtime.jsx)(Box.A,{sx:{maxWidth:"600px",margin:"auto",outline:"none",position:"relative",padding:"16px"},children})});ContentModal.__docgenInfo={description:"",methods:[],displayName:"ContentModal",props:{open:{required:!0,tsType:{name:"boolean"},description:""},onClose:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},children:{required:!0,tsType:{name:"ReactNode"},description:""}}};var react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const useCardSwiper=(cards,onClose)=>{const[isEnd,setIsEnd]=(0,react.useState)(!1);return{isEnd,handleReset:()=>{onClose(),(cards=>{const updatedCards=[...JSON.parse(localStorage.getItem("collectedCards")||"[]")];cards.forEach((newCard=>{const existingCard=updatedCards.find((card=>card.img===newCard.img&&card.rarity===newCard.rarity));existingCard?existingCard.count+=1:updatedCards.push({...newCard,count:1,createdAt:(new Date).toISOString()})})),localStorage.setItem("collectedCards",JSON.stringify(updatedCards))})(cards),setIsEnd(!1)},handleReachEnd:()=>{setIsEnd(!0)}}};var CardSwiper=__webpack_require__("./features/TCG/components/CardSwiper/CardSwiper.tsx");const CardSwiperContainer=({cards,onComplete})=>{const[isModalOpen,setModalOpen]=(0,react.useState)(!0),{isEnd,handleReset,handleReachEnd}=useCardSwiper(cards,(()=>{setModalOpen(!1),onComplete()}));return(0,jsx_runtime.jsx)(ContentModal,{open:isModalOpen,onClose:()=>setModalOpen(!1),children:(0,jsx_runtime.jsx)(CardSwiper.b,{cards,isEnd,onReset:handleReset,onReachEnd:handleReachEnd})})};CardSwiperContainer.__docgenInfo={description:"",methods:[],displayName:"CardSwiperContainer",props:{cards:{required:!0,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n  id: number;\n  name: string;\n  rarity: 'common' | 'super-rare' | 'rare' | 'ultra-rare';\n  img: string;\n}",signature:{properties:[{key:"id",value:{name:"number",required:!0}},{key:"name",value:{name:"string",required:!0}},{key:"rarity",value:{name:"union",raw:"'common' | 'super-rare' | 'rare' | 'ultra-rare'",elements:[{name:"literal",value:"'common'"},{name:"literal",value:"'super-rare'"},{name:"literal",value:"'rare'"},{name:"literal",value:"'ultra-rare'"}],required:!0}},{key:"img",value:{name:"string",required:!0}}]}}],raw:"CardType[]"},description:""},onComplete:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}}}}]);